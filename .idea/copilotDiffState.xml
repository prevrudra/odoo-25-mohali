<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/Main.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/Main.java" />
              <option name="originalContent" value="import java.io.BufferedWriter;&#10;import java.io.FileWriter;&#10;import java.io.IOException;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.Scanner;&#10;&#10;class func implements Runnable{&#10;    public ArrayList&lt;Products&gt; products = new ArrayList&lt;&gt;();&#10;    HashMap&lt;Integer, Customer&gt; customer = new HashMap&lt;&gt;();&#10;    static int id = 1;&#10;    public void adduser(){&#10;        Scanner s = new Scanner(System.in);&#10;        String name = s.nextLine();&#10;        int contact = s.nextInt();&#10;        Customer c =new Customer(name,contact);&#10;        customer.put(id++,c);&#10;    }&#10;    public void search(String name){&#10;        customer.values().forEach(customer1 -&gt; {&#10;            if(customer1.name.equalsIgnoreCase(name)){&#10;                System.out.println(customer1.toString());&#10;            }&#10;        });&#10;    }&#10;    public void remove(String name,int contact){&#10;        Scanner s = new Scanner(System.in);&#10;        String name2 = s.nextLine();&#10;        int idk = s.nextInt();&#10;        for(int i =0;i&lt;= customer.size();i++){&#10;            customer.values().forEach(customer1 -&gt; {&#10;                if(customer1.name.equalsIgnoreCase(name) &amp;&amp; customer1.number==idk){&#10;                    customer1.name=null;&#10;                    customer1.number= Integer.parseInt(null);&#10;                    customer1.products=null;&#10;                    customer1=null;&#10;                    System.out.println(&quot;Data Removed Successfully&quot;);&#10;                }&#10;&#10;            });&#10;        }&#10;    }&#10;    public void updateProduct(){&#10;        Scanner s = new Scanner(System.in);&#10;        String name = s.nextLine();&#10;        for (Products product : products) {&#10;            if(product.name.equalsIgnoreCase(name)){&#10;                System.out.println(&quot;Product found&quot;);&#10;                System.out.println(&quot;Select what you want to update:\n ~ Name - 1\n ~ Price - 2 \n ~ Stock - 3&quot;);&#10;                int value = s.nextInt();&#10;                switch (value){&#10;                    case 1:&#10;                        String nam3 = s.nextLine();&#10;                        product.name = nam3;&#10;                        break;&#10;                    case 2:&#10;                        int nam32 = s.nextInt();&#10;                        product.price = nam32;&#10;                        break;&#10;                    case 3:&#10;                        int nam33 = s.nextInt();&#10;                        product.stock = nam33;&#10;                        break;&#10;                }&#10;            }&#10;        }&#10;    }&#10;    public void deleteProduct() {&#10;&#10;        for (Products product : products) {&#10;            System.out.println(product.getId()+ ' '+product.name);&#10;        }&#10;        Scanner s = new Scanner(System.in);&#10;        int id = s.nextInt();&#10;        for (Products product : products) {&#10;            if(product.getId()==id){&#10;                products.remove(id);&#10;            }&#10;        }&#10;    }&#10;    public void saveFile() throws IOException {&#10;        BufferedWriter w = new BufferedWriter(new FileWriter(&quot;./Sample.txt&quot;));&#10;        for (Products p :products){&#10;            w.write(p.toString());&#10;        }&#10;        BufferedWriter w4 = new BufferedWriter(new FileWriter(&quot;./Sample2.txt&quot;));&#10;        customer.values().forEach(customer1 -&gt; {&#10;            try {&#10;                w4.write(customer1.toString());&#10;            } catch (IOException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;        });&#10;    }&#10;    @Override&#10;    public void run(){&#10;       while (true){&#10;           try {&#10;               saveFile();&#10;               System.out.println(&quot;Writing&quot;);&#10;               Thread.sleep(1000);&#10;           } catch (IOException | InterruptedException e) {&#10;               throw new RuntimeException(e);&#10;           }&#10;       }&#10;    }&#10;&#10;&#10;}&#10;&#10;public class Main {&#10;    public static void main(String[] args) throws IOException {&#10;        func f3 = new func();&#10;        Thread t = new Thread(f3);&#10;        t.start();&#10;        Products p1 = new Products(&quot;Laptop&quot;, 55000,5);&#10;        Products p2 = new Products(&quot;Phone&quot;, 20000,3);&#10;        Products p3 = new Products(&quot;Headphones&quot;, 3000,1);&#10;&#10;        // Create customers&#10;        Customer c1 = new Customer(&quot;Alice&quot;, 987654321);&#10;        Customer c2 = new Customer(&quot;Bob&quot;, 912345678);&#10;&#10;        // Add products to customers&#10;&#10;&#10;        // Optional: add customers to func&#10;&#10;&#10;        // Print to test&#10;        Trnx Trnx = new Trnx(f3.products,f3.customer);&#10;&#10;        // Sample transaction (if your Trnx class handles payment etc.)&#10;        Trnx.buy(1, 1);&#10;        Trnx.buy(2, 1);&#10;        ReportGenerator r= new ReportGenerator(f3.products,f3.customer);&#10;        r.generate();&#10;&#10;        // Report&#10;    }&#10;}" />
              <option name="updatedContent" value="import java.io.BufferedWriter;&#10;import java.io.FileWriter;&#10;import java.io.IOException;&#10;import java.util.ArrayList;&#10;import java.util.HashMap;&#10;import java.util.Scanner;&#10;&#10;class func implements Runnable{&#10;    public ArrayList&lt;Products&gt; products = new ArrayList&lt;&gt;();&#10;    HashMap&lt;Integer, Customer&gt; customer = new HashMap&lt;&gt;();&#10;    static int id = 1;&#10;    public void adduser(){&#10;        Scanner s = new Scanner(System.in);&#10;        String name = s.nextLine();&#10;        int contact = s.nextInt();&#10;        Customer c =new Customer(name,contact);&#10;        customer.put(id++,c);&#10;    }&#10;    public void search(String name){&#10;        customer.values().forEach(customer1 -&gt; {&#10;            if(customer1.name.equalsIgnoreCase(name)){&#10;                System.out.println(customer1.toString());&#10;            }&#10;        });&#10;    }&#10;    public void remove(String name,int contact){&#10;        Scanner s = new Scanner(System.in);&#10;        String name2 = s.nextLine();&#10;        int idk = s.nextInt();&#10;        for(int i =0;i&lt;= customer.size();i++){&#10;            customer.values().forEach(customer1 -&gt; {&#10;                if(customer1.name.equalsIgnoreCase(name) &amp;&amp; customer1.number==idk){&#10;                    customer1.name=null;&#10;                    customer1.number= Integer.parseInt(null);&#10;                    customer1.products=null;&#10;                    customer1=null;&#10;                    System.out.println(&quot;Data Removed Successfully&quot;);&#10;                }&#10;&#10;            });&#10;        }&#10;    }&#10;    public void updateProduct(){&#10;        Scanner s = new Scanner(System.in);&#10;        String name = s.nextLine();&#10;        for (Products product : products) {&#10;            if(product.name.equalsIgnoreCase(name)){&#10;                System.out.println(&quot;Product found&quot;);&#10;                System.out.println(&quot;Select what you want to update:\n ~ Name - 1\n ~ Price - 2 \n ~ Stock - 3&quot;);&#10;                int value = s.nextInt();&#10;                switch (value){&#10;                    case 1:&#10;                        String nam3 = s.nextLine();&#10;                        product.name = nam3;&#10;                        break;&#10;                    case 2:&#10;                        int nam32 = s.nextInt();&#10;                        product.price = nam32;&#10;                        break;&#10;                    case 3:&#10;                        int nam33 = s.nextInt();&#10;                        product.stock = nam33;&#10;                        break;&#10;                }&#10;            }&#10;        }&#10;    }&#10;    public void deleteProduct() {&#10;&#10;        for (Products product : products) {&#10;            System.out.println(product.getId()+ ' '+product.name);&#10;        }&#10;        Scanner s = new Scanner(System.in);&#10;        int id = s.nextInt();&#10;        for (Products product : products) {&#10;            if(product.getId()==id){&#10;                products.remove(id);&#10;            }&#10;        }&#10;    }&#10;    public void saveFile() throws IOException {&#10;        BufferedWriter w = new BufferedWriter(new FileWriter(&quot;./Sample.txt&quot;));&#10;        for (Products p :products){&#10;            w.write(p.toString());&#10;        }&#10;        BufferedWriter w4 = new BufferedWriter(new FileWriter(&quot;./Sample2.txt&quot;));&#10;        customer.values().forEach(customer1 -&gt; {&#10;            try {&#10;                w4.write(customer1.toString());&#10;            } catch (IOException e) {&#10;                throw new RuntimeException(e);&#10;            }&#10;        });&#10;    }&#10;    @Override&#10;    public void run(){&#10;       while (true){&#10;           try {&#10;               saveFile();&#10;               System.out.println(&quot;Writing&quot;);&#10;               Thread.sleep(1000);&#10;           } catch (IOException | InterruptedException e) {&#10;               throw new RuntimeException(e);&#10;           }&#10;       }&#10;    }&#10;&#10;&#10;}&#10;&#10;public class Main {&#10;    public static void main(String[] args) throws IOException {&#10;        func f3 = new func();&#10;        Thread t = new Thread(f3);&#10;        t.start();&#10;&#10;        // Sample Products&#10;        Products p1 = new Products(&quot;Laptop&quot;, 55000,5);&#10;        Products p2 = new Products(&quot;Phone&quot;, 20000,3);&#10;        Products p3 = new Products(&quot;Headphones&quot;, 3000,1);&#10;        f3.products.add(p1);&#10;        f3.products.add(p2);&#10;        f3.products.add(p3);&#10;&#10;        // Sample Customers&#10;        Customer c1 = new Customer(&quot;Alice&quot;, 987654321);&#10;        Customer c2 = new Customer(&quot;Bob&quot;, 912345678);&#10;        f3.customer.put(1, c1);&#10;        f3.customer.put(2, c2);&#10;&#10;        // Simulate purchases (add products to customers)&#10;        c1.products.put(p1.price, p1.name);&#10;        c1.products.put(p2.price, p2.name);&#10;        c2.products.put(p3.price, p3.name);&#10;&#10;        // Print to test&#10;        Trnx Trnx = new Trnx(f3.products,f3.customer);&#10;        // Sample transaction (if your Trnx class handles payment etc.)&#10;        Trnx.buy(1, 1);&#10;        Trnx.buy(2, 1);&#10;        ReportGenerator r= new ReportGenerator(f3.products,f3.customer);&#10;        r.generate();&#10;        // Report&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>